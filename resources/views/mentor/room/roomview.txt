@extends('layout/app')

@section('konten')
import React, { useState } from 'react';
import { Plus, Users, BookOpen, CheckSquare, Calendar, X, Eye } from 'lucide-react';

export default function MentorRoomPage() {
  const [activeTab, setActiveTab] = useState('overview');
  const [showAddTaskModal, setShowAddTaskModal] = useState(false);
  const [showSubmissionModal, setShowSubmissionModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  
  // State untuk form task baru
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    deadline: '',
    points: ''
  });

  // Data dummy untuk room
  const roomData = {
    id: 1,
    name: 'Web Development Bootcamp',
    code: 'WEB2024',
    description: 'Belajar pembuatan website dari dasar hingga mahir',
    mentor: 'John Doe'
  };

  // Data dummy peserta
  const [participants] = useState([
    { id: 1, name: 'Alice Johnson', email: 'alice@example.com', joinedAt: '2024-01-15', tasksCompleted: 8, totalTasks: 10 },
    { id: 2, name: 'Bob Smith', email: 'bob@example.com', joinedAt: '2024-01-16', tasksCompleted: 6, totalTasks: 10 },
    { id: 3, name: 'Charlie Brown', email: 'charlie@example.com', joinedAt: '2024-01-17', tasksCompleted: 9, totalTasks: 10 },
    { id: 4, name: 'Diana Prince', email: 'diana@example.com', joinedAt: '2024-01-18', tasksCompleted: 7, totalTasks: 10 }
  ]);

  // Data dummy materi
  const [materials] = useState([
    { id: 1, title: 'Pengenalan HTML & CSS', type: 'PDF', uploadedAt: '2024-01-10', size: '2.5 MB' },
    { id: 2, title: 'JavaScript Fundamentals', type: 'Video', uploadedAt: '2024-01-12', size: '150 MB' },
    { id: 3, title: 'React Basics', type: 'PDF', uploadedAt: '2024-01-15', size: '3.2 MB' },
    { id: 4, title: 'Project Structure Guide', type: 'Document', uploadedAt: '2024-01-18', size: '1.8 MB' }
  ]);

  // Data dummy tasks
  const [tasks, setTasks] = useState([
    {
      id: 1,
      title: 'Membuat Landing Page',
      description: 'Buat landing page sederhana dengan HTML dan CSS',
      deadline: '2024-02-01',
      points: 100,
      submissions: [
        { studentId: 1, studentName: 'Alice Johnson', submittedAt: '2024-01-30', status: 'reviewed', score: 95 },
        { studentId: 2, studentName: 'Bob Smith', submittedAt: '2024-02-01', status: 'pending', score: null },
        { studentId: 3, studentName: 'Charlie Brown', submittedAt: '2024-01-29', status: 'reviewed', score: 88 }
      ]
    },
    {
      id: 2,
      title: 'JavaScript Calculator',
      description: 'Implementasi kalkulator sederhana dengan JavaScript',
      deadline: '2024-02-05',
      points: 150,
      submissions: [
        { studentId: 1, studentName: 'Alice Johnson', submittedAt: '2024-02-04', status: 'reviewed', score: 92 },
        { studentId: 3, studentName: 'Charlie Brown', submittedAt: '2024-02-05', status: 'pending', score: null }
      ]
    },
    {
      id: 3,
      title: 'React Todo App',
      description: 'Buat aplikasi todo list dengan React',
      deadline: '2024-02-10',
      points: 200,
      submissions: []
    }
  ]);

  const handleAddTask = () => {
    if (newTask.title && newTask.deadline) {
      const task = {
        id: tasks.length + 1,
        ...newTask,
        points: parseInt(newTask.points) || 0,
        submissions: []
      };
      setTasks([...tasks, task]);
      setNewTask({ title: '', description: '', deadline: '', points: '' });
      setShowAddTaskModal(false);
    }
  };

  const viewSubmissions = (task) => {
    setSelectedTask(task);
    setShowSubmissionModal(true);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{roomData.name}</h1>
              <p className="text-gray-600 mt-1">Kode Room: <span className="font-mono font-semibold">{roomData.code}</span></p>
            </div>
            <button 
              onClick={() => setShowAddTaskModal(true)}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2"
            >
              <Plus size={18} />
              Tambah Task
            </button>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="max-w-7xl mx-auto px-6 mt-6">
        <div className="flex gap-1 bg-white p-1 rounded-lg border">
          <button
            onClick={() => setActiveTab('overview')}
            className={`flex-1 px-4 py-2 rounded-md font-medium transition-colors ${
              activeTab === 'overview' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            Overview
          </button>
          <button
            onClick={() => setActiveTab('participants')}
            className={`flex-1 px-4 py-2 rounded-md font-medium transition-colors ${
              activeTab === 'participants' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            <Users className="inline mr-2" size={18} />
            Peserta ({participants.length})
          </button>
          <button
            onClick={() => setActiveTab('materials')}
            className={`flex-1 px-4 py-2 rounded-md font-medium transition-colors ${
              activeTab === 'materials' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            <BookOpen className="inline mr-2" size={18} />
            Materi ({materials.length})
          </button>
          <button
            onClick={() => setActiveTab('tasks')}
            className={`flex-1 px-4 py-2 rounded-md font-medium transition-colors ${
              activeTab === 'tasks' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            <CheckSquare className="inline mr-2" size={18} />
            Tasks ({tasks.length})
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-7xl mx-auto px-6 py-6">
        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white p-6 rounded-lg border">
              <div className="flex items-center gap-3 mb-2">
                <div className="p-3 bg-blue-100 rounded-lg">
                  <Users className="text-blue-600" size={24} />
                </div>
                <div>
                  <p className="text-gray-600 text-sm">Total Peserta</p>
                  <p className="text-2xl font-bold">{participants.length}</p>
                </div>
              </div>
            </div>
            <div className="bg-white p-6 rounded-lg border">
              <div className="flex items-center gap-3 mb-2">
                <div className="p-3 bg-green-100 rounded-lg">
                  <BookOpen className="text-green-600" size={24} />
                </div>
                <div>
                  <p className="text-gray-600 text-sm">Total Materi</p>
                  <p className="text-2xl font-bold">{materials.length}</p>
                </div>
              </div>
            </div>
            <div className="bg-white p-6 rounded-lg border">
              <div className="flex items-center gap-3 mb-2">
                <div className="p-3 bg-purple-100 rounded-lg">
                  <CheckSquare className="text-purple-600" size={24} />
                </div>
                <div>
                  <p className="text-gray-600 text-sm">Total Tasks</p>
                  <p className="text-2xl font-bold">{tasks.length}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Participants Tab */}
        {activeTab === 'participants' && (
          <div className="bg-white rounded-lg border">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Nama</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Email</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Bergabung</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Progress</th>
                  </tr>
                </thead>
                <tbody className="divide-y">
                  {participants.map(p => (
                    <tr key={p.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 font-medium text-gray-900">{p.name}</td>
                      <td className="px-6 py-4 text-gray-600">{p.email}</td>
                      <td className="px-6 py-4 text-gray-600">{p.joinedAt}</td>
                      <td className="px-6 py-4">
                        <div className="flex items-center gap-2">
                          <div className="flex-1 bg-gray-200 rounded-full h-2 max-w-xs">
                            <div 
                              className="bg-blue-600 h-2 rounded-full" 
                              style={{ width: `${(p.tasksCompleted / p.totalTasks) * 100}%` }}
                            />
                          </div>
                          <span className="text-sm text-gray-600">{p.tasksCompleted}/{p.totalTasks}</span>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Materials Tab */}
        {activeTab === 'materials' && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {materials.map(m => (
              <div key={m.id} className="bg-white p-4 rounded-lg border hover:shadow-md transition-shadow">
                <div className="flex items-start justify-between">
                  <div className="flex items-start gap-3">
                    <div className="p-2 bg-blue-100 rounded-lg">
                      <BookOpen className="text-blue-600" size={20} />
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900">{m.title}</h3>
                      <p className="text-sm text-gray-600 mt-1">{m.type} • {m.size}</p>
                      <p className="text-xs text-gray-500 mt-1">Diunggah {m.uploadedAt}</p>
                    </div>
                  </div>
                  <button className="text-blue-600 hover:text-blue-700 text-sm font-medium">
                    Lihat
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Tasks Tab */}
        {activeTab === 'tasks' && (
          <div className="space-y-4">
            {tasks.map(task => {
              const totalSubmissions = task.submissions.length;
              const pendingSubmissions = task.submissions.filter(s => s.status === 'pending').length;
              
              return (
                <div key={task.id} className="bg-white p-6 rounded-lg border hover:shadow-md transition-shadow">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-xl font-semibold text-gray-900">{task.title}</h3>
                      <p className="text-gray-600 mt-1">{task.description}</p>
                    </div>
                    <div className="text-right">
                      <span className="inline-block px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm font-medium">
                        {task.points} poin
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-6 text-sm text-gray-600 mb-4">
                    <div className="flex items-center gap-2">
                      <Calendar size={16} />
                      <span>Deadline: {task.deadline}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckSquare size={16} />
                      <span>{totalSubmissions} pengumpulan</span>
                    </div>
                    {pendingSubmissions > 0 && (
                      <span className="px-2 py-1 bg-orange-100 text-orange-700 rounded text-xs font-medium">
                        {pendingSubmissions} belum direview
                      </span>
                    )}
                  </div>

                  <button 
                    onClick={() => viewSubmissions(task)}
                    className="w-full py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 font-medium flex items-center justify-center gap-2"
                  >
                    <Eye size={18} />
                    Lihat Pengumpulan
                  </button>
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* Modal Add Task */}
      {showAddTaskModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b flex items-center justify-between">
              <h2 className="text-2xl font-bold">Tambah Task Baru</h2>
              <button 
                onClick={() => setShowAddTaskModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>
            
            <div className="p-6 space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Judul Task</label>
                <input
                  type="text"
                  value={newTask.title}
                  onChange={(e) => setNewTask({...newTask, title: e.target.value})}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Contoh: Membuat Portfolio Website"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Deskripsi</label>
                <textarea
                  value={newTask.description}
                  onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                  rows={4}
                  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Jelaskan detail task yang harus dikerjakan..."
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Deadline</label>
                  <input
                    type="date"
                    value={newTask.deadline}
                    onChange={(e) => setNewTask({...newTask, deadline: e.target.value})}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Poin</label>
                  <input
                    type="number"
                    value={newTask.points}
                    onChange={(e) => setNewTask({...newTask, points: e.target.value})}
                    className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="100"
                  />
                </div>
              </div>
            </div>

            <div className="p-6 border-t flex gap-3 justify-end">
              <button 
                onClick={() => setShowAddTaskModal(false)}
                className="px-6 py-2 border rounded-lg hover:bg-gray-50"
              >
                Batal
              </button>
              <button 
                onClick={handleAddTask}
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                Tambah Task
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal Submission */}
      {showSubmissionModal && selectedTask && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold">{selectedTask.title}</h2>
                <p className="text-gray-600 mt-1">Pengumpulan Task</p>
              </div>
              <button 
                onClick={() => setShowSubmissionModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>
            
            <div className="p-6">
              {selectedTask.submissions.length === 0 ? (
                <div className="text-center py-12">
                  <CheckSquare className="mx-auto text-gray-400 mb-3" size={48} />
                  <p className="text-gray-600">Belum ada yang mengumpulkan task ini</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-50 border-b">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Peserta</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Waktu Pengumpulan</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Nilai</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Aksi</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y">
                      {selectedTask.submissions.map((sub, idx) => (
                        <tr key={idx} className="hover:bg-gray-50">
                          <td className="px-6 py-4 font-medium text-gray-900">{sub.studentName}</td>
                          <td className="px-6 py-4 text-gray-600">{sub.submittedAt}</td>
                          <td className="px-6 py-4">
                            <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium ${
                              sub.status === 'reviewed' 
                                ? 'bg-green-100 text-green-700' 
                                : 'bg-orange-100 text-orange-700'
                            }`}>
                              {sub.status === 'reviewed' ? 'Sudah Direview' : 'Pending'}
                            </span>
                          </td>
                          <td className="px-6 py-4">
                            {sub.score !== null ? (
                              <span className="font-semibold text-blue-600">{sub.score}</span>
                            ) : (
                              <span className="text-gray-400">-</span>
                            )}
                          </td>
                          <td className="px-6 py-4">
                            <button className="text-blue-600 hover:text-blue-700 font-medium text-sm">
                              {sub.status === 'reviewed' ? 'Lihat Detail' : 'Review'}
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

@endsection